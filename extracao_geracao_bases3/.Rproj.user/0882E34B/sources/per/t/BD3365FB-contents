con <- odbcDriverConnect('driver={SQL Server} ;server=cosmos;database=cosmos_v14b')

setwd("C:/Estudos/ENTRADA CD/test")

############ produtos

prod <- sqlQuery(con, "
SELECT
	KD.KADE_CD_DEPOSITO AS CD_DEPOSITO,
	KD.KADE_CD_PRODUTO AS CD_PRODUTO,
	PM.PRME_TX_DESCRICAO1 AS DESCRICAO,
	KD.KADE_TP_MOV AS TP_MOV,
	CAST(KD.KADE_DH_OCORR AS DATE) AS DT_OCORR,
	CAST(KD.KADE_QT_MOV AS NUMERIC) AS QT_MOV,
	CAST(KD.KADE_VL_CMPG AS MONEY) AS VL_CMPG,
	CAST(IIF(LEFT(KD.KADE_TP_MOV,1)='A', -1*KD.KADE_VL_CMPG*KD.KADE_QT_MOV, KD.KADE_VL_CMPG*KD.KADE_QT_MOV) AS MONEY) AS TT_CMPG,
	CAST(KD.KADE_QT_SALDO AS NUMERIC) AS QT_SALDO,
	CAST(KD.KADE_QT_SALDO_ANT AS NUMERIC) AS QT_SALDO_ANT,
	CAST(PM.PRME_DT_LIBCAD AS DATE) AS DT_LIBCAD,
	COUNT(F.FILI_CD_FILIAL) AS QT_FILIAIS_ATIVAS,
	V.VENDA_QT_6M,
	D.EA,
	D.DEMANDA_LOJAS,
	KD.KADE_TX_NR_DOCTO



FROM DBO.KARDEX_DEPOSITO KD

INNER JOIN DBO.PRODUTO_MESTRE PM
ON KD.KADE_CD_PRODUTO = PM.PRME_CD_PRODUTO

--VENDA 6M

LEFT JOIN (
	SELECT
		F.CODIGO_DEPOSITO_PRINCIPAL,
		KF.KAFI_CD_PRODUTO,
		CAST(SUM(KF.KAFI_QT_MOV) AS NUMERIC) AS VENDA_QT_6M

	FROM DBO.KARDEX_FILIAL KF
	INNER JOIN DBO.FILIAL F
	ON KF.KAFI_CD_FILIAL = F.FILI_CD_FILIAL

	WHERE KF.KAFI_TP_MOV = 'SV'

	GROUP BY 
		F.CODIGO_DEPOSITO_PRINCIPAL,
		KF.KAFI_CD_PRODUTO
) V ON KD.KADE_CD_DEPOSITO = V.CODIGO_DEPOSITO_PRINCIPAL AND KD.KADE_CD_PRODUTO = V.KAFI_CD_PRODUTO

-- VENDA 6M


--NUMERO DE FILIAIS ATIVAS
INNER JOIN (
	SELECT 
		F.FILI_CD_FILIAL,
		F.CODIGO_DEPOSITO_PRINCIPAL

	FROM DBO.FILIAL F
	WHERE F.FILI_FL_SITUACAO = 'A'
) F ON KD.KADE_CD_DEPOSITO = F.CODIGO_DEPOSITO_PRINCIPAL

--NUMERO DE FILIAIS ATIVAS

-- DEMANDA LOJAS
LEFT JOIN (
	SELECT 
		F.CODIGO_DEPOSITO_PRINCIPAL,
		PF.PRME_CD_PRODUTO,
		CAST(AVG(PF.ESTQUE_ALVO) AS NUMERIC) AS EA,
		CAST(SUM(IIF(PF.PRFI_DT_FIMVALFARE>GETDATE() AND PF.PRFI_QT_UNDFAC > PF.ESTQUE_ALVO,PF.PRFI_QT_UNDFAC,PF.ESTQUE_ALVO)) AS NUMERIC) AS DEMANDA_LOJAS
	FROM DBO.PRODUTO_FILIAL PF (NOLOCK)
	INNER JOIN DBO.FILIAL F (NOLOCK)
	ON PF.FILI_CD_FILIAL = F.FILI_CD_FILIAL
	GROUP BY
		F.CODIGO_DEPOSITO_PRINCIPAL,
		PF.PRME_CD_PRODUTO
) D ON KD.KADE_CD_DEPOSITO  = D.CODIGO_DEPOSITO_PRINCIPAL AND KD.KADE_CD_PRODUTO = D.PRME_CD_PRODUTO

--FIM DEMANDA LOJAS

WHERE KD.KADE_TP_MOV IN ('EC','AR')

GROUP BY 
	KD.KADE_CD_DEPOSITO,
	KD.KADE_CD_PRODUTO,
	PM.PRME_TX_DESCRICAO1,
	KD.KADE_TP_MOV,
	CAST(KD.KADE_DH_OCORR AS DATE),
	CAST(KD.KADE_QT_MOV AS NUMERIC),
	CAST(KD.KADE_VL_CMPG AS MONEY),
	CAST(IIF(LEFT(KD.KADE_TP_MOV,1)='A',-1*KD.KADE_VL_CMPG*KD.KADE_QT_MOV,KD.KADE_VL_CMPG*KD.KADE_QT_MOV) AS MONEY),
	CAST(KD.KADE_QT_SALDO AS NUMERIC),
	CAST(KD.KADE_QT_SALDO_ANT AS NUMERIC),
	CAST(PM.PRME_DT_LIBCAD AS DATE),
	V.VENDA_QT_6M,
	D.EA,
	D.DEMANDA_LOJAS,
	KD.KADE_TX_NR_DOCTO
")


############ Categoria de Produtos

categ <- sqlQuery(con, "
SELECT
	PM.PRME_CD_PRODUTO AS CD_PRODUTO,
	PM.PRME_TX_DESCRICAO1 AS PROD_DESC,
	NIVEL1.CAPN_DS_CATEGORIA AS NIVEL1,
	NIVEL2.CAPN_DS_CATEGORIA AS NIVEL2,
	NIVEL3.CAPN_DS_CATEGORIA AS NIVEL3,
	NIVEL4.CAPN_DS_CATEGORIA AS NIVEL4,
	NIVEL5.CAPN_DS_CATEGORIA AS NIVEL5,  
	PM.TPLP_SG_PSICO,
	CASE
		WHEN TERM.PRME_CD_PRODUTO IS NOT NULL THEN TERMO
		ELSE ''
	END AS TERMO

FROM PRODUTO_MESTRE AS PM WITH (NOLOCK)

LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL1 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,1)+'.000.000.00.00.00.00.00' = NIVEL1.CAPN_CD_CATEGORIA
LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL2 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,5)+'.000.00.00.00.00.00' = NIVEL2.CAPN_CD_CATEGORIA
LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL3 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,9)+'.00.00.00.00.00' = NIVEL3.CAPN_CD_CATEGORIA
LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL4 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,12)+'.00.00.00.00' = NIVEL4.CAPN_CD_CATEGORIA
LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL5 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,15)+'.00.00.00' = NIVEL5.CAPN_CD_CATEGORIA

LEFT JOIN(
	SELECT
		PD.PRME_CD_PRODUTO,
		PM.PRME_TX_DESCRICAO1,
		'TERMO' AS TERMO
	FROM DBO.PRODUTO_DEPOSITO PD
	INNER JOIN DBO.PRODUTO_MESTRE PM
	ON PD.PRME_CD_PRODUTO = PM.PRME_CD_PRODUTO
	INNER JOIN DBO.ZONA_SEPARACAO Z
	ON PD.ID_ZONA = Z.ID_ZONA 
	WHERE Z.DESCRICAO LIKE 'T%'
	GROUP BY 
		PD.PRME_CD_PRODUTO, PM.PRME_TX_DESCRICAO1
) AS TERM ON TERM.PRME_CD_PRODUTO = PM.PRME_CD_PRODUTO

WHERE 
	PM.CAPN_CD_CATEGORIA NOT LIKE '3%'AND
	PM.CAPN_CD_CATEGORIA NOT LIKE '1.101.009%' AND
	PM.CAPN_CD_CATEGORIA NOT LIKE '1.102.009%' AND
	PM.CAPN_CD_CATEGORIA NOT LIKE '2.504.001%' 
")

# base que possue comprador, fornecedor e classe de faturamento cd

comp<-sqlQuery(con, "
SELECT
	--CONCAT(PM.PRME_CD_PRODUTO,'-',PM.PRME_NR_DV) as CODCOMDV,
	PM.PRME_CD_PRODUTO AS CD_PRODUTO,
	USA.USUA_NM_USUARIO AS COMPRADOR,
	FORN2.FORN_NM_FANTASIA AS FORNECEDOR,
	DEP.PRDP_TP_CLABCFAT AS CLASSIF_ABC_FATURAMENTO_CD,
	CONVERT(VARCHAR(10),PM.XXXX_DH_CAD,103) AS DT_CADASTRO

FROM DBO.PRODUTO_MESTRE PM (NOLOCK)

LEFT JOIN DBO.PRODUTO_DEPOSITO DEP (NOLOCK)
ON PM.PRME_CD_PRODUTO=DEP.PRME_CD_PRODUTO
LEFT JOIN DBO.GRUPO_COMPRA GC (NOLOCK)
ON DEP.GRCO_SQ_GRUPCOMPRA=GC.GRCO_SQ_GRUPCOMPRA
LEFT JOIN DBO.USUARIO USA (NOLOCK)
ON GC.USCO_CD_COMPRADOR=USA.USUA_CD_USUARIO
LEFT JOIN DBO.FORNECEDOR FORN (NOLOCK)
ON PM.FORN_CD_FORNECEDOR=FORN.FORN_CD_FORNECEDOR
LEFT JOIN dbo.FORN_DEPOSITO FDEP (NOLOCK)
ON DEP.DEPO_CD_DEPOSITO=FDEP.DEPO_CD_DEPOSITO
AND DEP.FORN_CD_FORNECEDOR=FDEP.FORN_CD_FORNECEDOR
LEFT JOIN DBO.FORNECEDOR FORN2 (NOLOCK)
ON FDEP.FORN_CD_FORNECEDOR=FORN2.FORN_CD_FORNECEDOR
LEFT JOIN DBO.CATEGORIA_PRODUTO_NOVO NIVEL5 (NOLOCK)
ON SUBSTRING(PM.CAPN_CD_CATEGORIA,1,15)+'.00.00.00' = NIVEL5.CAPN_CD_CATEGORIA

WHERE DEP.DEPO_CD_DEPOSITO=1
")


# base de nf

nf <- sqlQuery(con,
               "SELECT 
	DET.NECA_SQ_NOTAFISCAL,
	DET.NEDE_SQ_DETNF,
	CAB.DEPO_CD_DEPOSITO,
	DET.NEDE_CD_PRODUTO AS COD_PRODUTO,
	CAB.NECA_NR_NF AS NR_NOTA_FISCAL,
	CAB.NECA_DT_EMISSAO,
	CAB.NECA_DH_ATLZ,
	CAB.NECA_DH_DIGITACAO,
	CAB.NECA_DT_ENTRADA,
	CAST(DET.NEDE_VL_PRCUNIT AS MONEY) AS PRECO_UNIT,
	CAST(DET.NEDE_QT_ENTRADA AS NUMERIC) AS QTD_ENT,
	CAST(DET.NEDE_QT_FISICA AS NUMERIC) AS QTD_FISICA,
	CAB.NECA_DT_JULPEDFOR,
	CAB.NECA_SQ_DTJULPDFOR,
	CAB.CHAVE_ACESSO_NFE


FROM DBO.NOTA_ENTR_DET DET (NOLOCK)
LEFT JOIN DBO.NOTA_ENTR_CAB CAB (NOLOCK)
ON DET.NECA_SQ_NOTAFISCAL = CAB.NECA_SQ_NOTAFISCAL
LEFT JOIN DBO.ALIQUOTA_ICMS ICMS (NOLOCK)
ON DET.ALIC_SQ_ALIQUOTA = ICMS.ALIC_SQ_ALIQUOTA

WHERE YEAR(CAB.NECA_DT_ENTRADA)>=2019
AND CAB.DEPO_CD_DEPOSITO IS NOT NULL"
)

#base de motivos

motivo<-sqlQuery(con, "SELECT 
CAB.PEFC_DT_JULPEDFOR,
CAB.PEFC_SQ_DTJULPDFOR,
CAB.FORN_CD_FORNECEDOR,
CAB.USCO_CD_COMPRADOR,
CAST(CAB.PEFC_DH_PEDIDO AS DATE) AS PEFC_DH_PEDIDO,
CAB.PEFC_CD_DEPOENTREG,
CAB.PEFC_FL_SITPEDIDO,
LTRIM(CAB.PEFC_DS_OBSPEDCAB) AS MOTIVO,
CAST(CAB.PEFC_DH_ENTREGA AS DATE) AS PEFC_DH_ENTREGA,
DET.PRME_CD_PRODUTO,
CAST(DET.PEFD_VL_UNITARIO AS MONEY) AS PEFD_VL_UNITARIO,
CAST(DET.PEFD_DH_SITUACAO AS DATE) AS PEFD_DH_SITUACAO,
DET.PEFD_SG_EMBALAGEM,
CAST(DET.PEFD_QT_EMBALAGEM AS NUMERIC) AS PEFD_QT_EMBALAGEM,
CAST(DET.PEFD_QT_PEDIDA AS NUMERIC) AS PEFD_QT_PEDIDA,
CAST(DET.PEFD_QT_PEDIDA_ORIGINAL AS NUMERIC) AS PEFD_QT_PEDIDA_ORIGINAL,
CAST(DET.PEFD_QT_ATENDIDA AS NUMERIC) AS PEFD_QT_ATENDIDA,
CAST(DET.PEFD_QT_REAL AS NUMERIC) AS PEFD_QT_REAL,
DET.PEFD_FL_VERBAPROM,
CAST(DET.PEFD_VL_VERBAPROM AS MONEY) AS PEFD_VL_VERBAPROM,
CAST(DET.PEFD_QT_BONIFPED AS NUMERIC) AS PEFD_QT_BONIFPED,
CAST(DET.PEFD_QT_BONIFATEND AS NUMERIC) AS PEFD_QT_BONIFATEND,
CAST(DET.PEFD_QT_REALBONIF AS NUMERIC) AS PEFD_QT_REALBONIF,
CAST(DET.PEFD_QT_ANTPED AS NUMERIC) AS PEFD_QT_ANTPED,
CAST(DET.QUANTIDADE_EMBALAGEM_MINIMA AS NUMERIC) AS QUANTIDADE_EMBALAGEM_MINIMA,
DET.PEFD_TP_EMBALAGEM,
CAST(PD.PRDP_VL_CMPG AS MONEY) AS PRDP_VL_CMPG


FROM DBO.PED_FORN_CAB CAB (NOLOCK)
INNER JOIN DBO.PED_FORN_DET DET (NOLOCK)
ON CAB.PEFC_SQ_DTJULPDFOR = DET.PEFC_SQ_DTJULPDFOR
AND CAB.PEFC_DT_JULPEDFOR = DET.PEFC_DT_JULPEDFOR

INNER JOIN DBO.PRODUTO_DEPOSITO PD
ON CAB.PEFC_CD_DEPOENTREG = PD.DEPO_CD_DEPOSITO
AND DET.PRME_CD_PRODUTO = PD.PRME_CD_PRODUTO

WHERE YEAR(CAB.PEFC_DH_PEDIDO) >= 2020")

#quantidade embalagem minima

em_min <- sqlQuery(con, "
select DEPO_CD_DEPOSITO, PRME_CD_PRODUTO, PRDP_QT_EMBEXPED 
from PRODUTO_DEPOSITO pd
")

#base indica se o produto eh especial
r_especial<-read_excel("base_recebimento_especial.xlsx")
colnames(r_especial)[1]<-"PROD"